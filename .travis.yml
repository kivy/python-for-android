sudo: required

dist: xenial  # needed for more recent python 3 and python3-venv

language: generic

stages:
  - lint
  - test

services:
  - docker

before_install:
  # https://github.com/travis-ci/travis-ci/issues/6069#issuecomment-266546552
  - git remote set-branches --add origin develop
  - git fetch

jobs:
  include:
    - &linting
      stage: lint
      language: python
      python: 3.7
      before_script:
        # We need to escape virtualenv for `test_pythonpackage_basic.test_virtualenv`
        #   See also: https://github.com/travis-ci/travis-ci/issues/8589
        - type -t deactivate && deactivate || true
        - export PATH=/opt/python/3.7/bin:$PATH
        # Install tox & virtualenv
        #   Note: venv/virtualenv are both used by tests/test_pythonpackage.py
        - pip3.7 install -U virtualenv
        - pip3.7 install tox>=2.0
        # Install coveralls & dependencies
        #   Note: pyOpenSSL needed to send the coveralls reports
        - pip3.7 install pyOpenSSL
        - pip3.7 install coveralls
      script:
        # we want to fail fast on tox errors without having to `docker build` first
        - tox -- tests/ --ignore tests/test_pythonpackage.py
        # (we ignore test_pythonpackage.py since these run way too long!!
        #  test_pythonpackage_basic.py will still be run.)
      name: "Tox Pep8"
      env: TOXENV=pep8
    - <<: *linting
      name: "Tox Python 2"
      env: TOXENV=py27
    - <<: *linting
      name: "Tox Python 3 & Coverage"
      env: TOXENV=py3
      after_success:
        - coveralls

    - &testing
      stage: test
      before_script:
        # build docker image
        - docker build --tag=p4a --file Dockerfile.py3 .
        # Run a background process to make sure that travis will not kill our tests in
        # case that the travis log doesn't produce any output for more than 10 minutes
        - while sleep 540; do echo "==== Still running (travis, don't kill me) ===="; done &
      script:
        - >
          docker run
          -e CI
          -e TRAVIS_JOB_ID
          -e TRAVIS_BRANCH
          -e ANDROID_SDK_HOME="/home/user/.android/android-sdk"
          -e ANDROID_NDK_HOME="/home/user/.android/android-ndk"
          p4a /bin/sh -c "$COMMAND"
      after_script:
        # kill the background process started before run docker
        - kill %1
      name: Python 3 arm64-v8a
      # overrides requirements to skip `peewee` pure python module, see:
      # https://github.com/kivy/python-for-android/issues/1263#issuecomment-390421054
      env:
        COMMAND='. venv/bin/activate && cd testapps/ && python setup_testapp_python3_sqlite_openssl.py apk --sdk-dir $ANDROID_SDK_HOME --ndk-dir $ANDROID_NDK_HOME --requirements libffi,sdl2,pyjnius,kivy,python3,openssl,requests,sqlite3,setuptools --arch=arm64-v8a'
    - <<: *testing
      name: Python 3 armeabi-v7a
      os: osx
      osx_image: xcode11  # since xcode1.3, python3 is the default interpreter
      before_script:
        # installs java 1.8, android's SDK/NDK and p4a
        - make -f ci/makefiles/osx.mk
        - export JAVA_HOME=/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home
        # Run a background process (like we do with linux tests)
        - while sleep 540; do echo "==== Still running (travis, don't kill me) ===="; done &
      script:
        - >
          cd testapps && python3 setup_testapp_python3_sqlite_openssl.py apk
          --sdk-dir $HOME/.android/android-sdk
          --ndk-dir $HOME/.android/android-ndk
          --requirements libffi,sdl2,pyjnius,kivy,python3,openssl,requests,sqlite3,setuptools
          --arch=armeabi-v7a
    - <<: *testing
      name: Python 2 armeabi-v7a (with numpy)
      env: COMMAND='. venv/bin/activate && cd testapps/ && python setup_testapp_python2_sqlite_openssl.py apk --sdk-dir $ANDROID_SDK_HOME --ndk-dir $ANDROID_NDK_HOME --requirements sdl2,pyjnius,kivy,python2,openssl,requests,sqlite3,setuptools,numpy'
    - <<: *testing
      name: Rebuild updated recipes
      env: COMMAND='. venv/bin/activate && ./ci/rebuild_updated_recipes.py'
