--- a/src/main/java/org/libsdl/app/SDLActivity.java
+++ b/src/main/java/org/libsdl/app/SDLActivity.java
@@ -221,6 +221,8 @@
 
     // This is what SDL runs in. It invokes SDL_main(), eventually
     protected static Thread mSDLThread;
+
+    public static int keyboardInputType = InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD;
 
     protected static SDLGenericMotionListener_API12 getMotionListener() {
         if (mMotionListener == null) {
@@ -323,6 +325,15 @@
         Log.v(TAG, "Model: " + Build.MODEL);
         Log.v(TAG, "onCreate()");
         super.onCreate(savedInstanceState);
+
+        SDLActivity.initialize();
+        // So we can call stuff from static callbacks
+        mSingleton = this;
+    }
+
+    // We don't do this in onCreate because we unpack and load the app data on a thread
+    // and we can't run setup tasks until that thread completes.
+    protected void finishLoad() {
 
         try {
             Thread.currentThread().setName("SDLActivity");
@@ -837,7 +848,7 @@
     Handler commandHandler = new SDLCommandHandler();
 
     // Send a message from the SDLMain thread
-    boolean sendCommand(int command, Object data) {
+    protected boolean sendCommand(int command, Object data) {
         Message msg = commandHandler.obtainMessage();
         msg.arg1 = command;
         msg.obj = data;
@@ -1385,7 +1396,22 @@
             return null;
         }
         return SDLActivity.mSurface.getNativeSurface();
+    }
+
+    /**
+    * Calls turnActive() on singleton to keep loading screen active
+    */
+    public static void triggerAppConfirmedActive() {
+        mSingleton.appConfirmedActive();
     }
+  
+    /**
+     * Trick needed for loading screen, overridden by PythonActivity
+     * to keep loading screen active
+     */
+    public void appConfirmedActive() {
+    }
+ 
 
     // Input
 
@@ -1881,6 +1907,7 @@
 
         Log.v("SDL", "Running main function " + function + " from library " + library);
 
+        SDLActivity.mSingleton.appConfirmedActive();
         SDLActivity.nativeRunMain(library, function, arguments);
 
         Log.v("SDL", "Finished main function");
@@ -1938,8 +1965,7 @@
     public InputConnection onCreateInputConnection(EditorInfo outAttrs) {
         ic = new SDLInputConnection(this, true);
 
-        outAttrs.inputType = InputType.TYPE_CLASS_TEXT |
-                             InputType.TYPE_TEXT_FLAG_MULTI_LINE;
+        outAttrs.inputType = SDLActivity.keyboardInputType;
         outAttrs.imeOptions = EditorInfo.IME_FLAG_NO_EXTRACT_UI |
                               EditorInfo.IME_FLAG_NO_FULLSCREEN /* API 11 */;
 
