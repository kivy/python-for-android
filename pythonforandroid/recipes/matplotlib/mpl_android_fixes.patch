--- matplotlib-3.1.1/setupext.py.orig	2019-12-31 01:25:00.000000000 +0100
+++ matplotlib-3.1.1/setupext.py	2020-03-01 21:12:41.493350250 +0100
@@ -604,8 +604,7 @@ class Numpy(SetupPackage):
     name = "numpy"
 
     def add_flags(self, ext):
-        import numpy as np
-        ext.include_dirs.append(np.get_include())
+        ext.include_dirs.append(os.environ['NUMPY_INCLUDES'])
         ext.define_macros.extend([
             # Ensure that PY_ARRAY_UNIQUE_SYMBOL is uniquely defined for each
             # extension.
@@ -617,7 +616,7 @@ class Numpy(SetupPackage):
         ])
 
     def get_setup_requires(self):
-        return ['numpy>=1.11']
+        return []  # don't need it for p4a, due to above changes
 
     def get_install_requires(self):
         return ['numpy>=1.11']
@@ -674,7 +673,7 @@ class FreeType(SetupPackage):
             if sys.platform == 'win32':
                 libfreetype = 'libfreetype.lib'
             else:
-                libfreetype = 'libfreetype.a'
+                libfreetype = 'libfreetype.so'
             ext.extra_objects.insert(
                 0, os.path.join(src_path, 'objs', '.libs', libfreetype))
             ext.define_macros.append(('FREETYPE_BUILD_TYPE', 'local'))
@@ -701,7 +700,7 @@ class FreeType(SetupPackage):
         if sys.platform == 'win32':
             libfreetype = 'libfreetype.lib'
         else:
-            libfreetype = 'libfreetype.a'
+            libfreetype = 'libfreetype.so'
 
         # bailing because it is already built
         if os.path.isfile(os.path.join(
@@ -830,7 +829,7 @@ class Png(SetupPackage):
             ext, 'libpng',
             atleast_version='1.2',
             alt_exec=['libpng-config', '--ldflags'],
-            default_libraries=['png', 'z'])
+            default_libraries=['png16', 'z'])  # adapted to p4a's png library
         Numpy().add_flags(ext)
         return ext
 
@@ -957,9 +956,10 @@ class BackendAgg(OptionalBackendPackage)
 
 class BackendTkAgg(OptionalBackendPackage):
     name = "tkagg"
-    force = True
+    force = False
 
     def check(self):
+        raise CheckFailed("Disabled by patching during Android build")  # tk doesn't work on Android but causes build problems
         return "installing; run-time loading from Python Tcl/Tk"
 
     def get_extension(self):
