diff --git a/numpy/core/src/multiarray/numpyos.c b/numpy/core/src/multiarray/numpyos.c
index 44b32f4..378e199 100644
--- a/numpy/core/src/multiarray/numpyos.c
+++ b/numpy/core/src/multiarray/numpyos.c
@@ -165,8 +165,7 @@ ensure_decimal_point(char* buffer, size_t buf_size)
 static void
 change_decimal_from_locale_to_dot(char* buffer)
 {
-    struct lconv *locale_data = localeconv();
-    const char *decimal_point = locale_data->decimal_point;
+    const char *decimal_point = ".";
 
     if (decimal_point[0] != '.' || decimal_point[1] != 0) {
         size_t decimal_point_len = strlen(decimal_point);
@@ -448,8 +447,7 @@ NumPyOS_ascii_strtod_plain(const char *s, char** endptr)
 NPY_NO_EXPORT double
 NumPyOS_ascii_strtod(const char *s, char** endptr)
 {
-    struct lconv *locale_data = localeconv();
-    const char *decimal_point = locale_data->decimal_point;
+    const char *decimal_point = ".";
     size_t decimal_point_len = strlen(decimal_point);
 
     char buffer[FLOAT_FORMATBUFLEN+1];
diff --git a/numpy/core/src/private/npy_config.h b/numpy/core/src/private/npy_config.h
index f768c90..4e5d168 100644
--- a/numpy/core/src/private/npy_config.h
+++ b/numpy/core/src/private/npy_config.h
@@ -41,4 +41,10 @@
 #undef HAVE_ATAN2
 #endif
 
+/* Android only */
+#ifdef ANDROID
+#undef HAVE_LDEXPL
+#undef HAVE_FREXPL
+#endif
+
 #endif
diff --git a/numpy/testing/__init__.py b/numpy/testing/__init__.py
index 258cbe9..ce4e0eb 100644
--- a/numpy/testing/__init__.py
+++ b/numpy/testing/__init__.py
@@ -1,16 +1,7 @@
-"""Common test support for all numpy test scripts.
-
-This single module should provide all the common functionality for numpy tests
-in a single location, so that test scripts can just import it and work right
-away.
-
-"""
-from __future__ import division, absolute_import, print_function
-
-from unittest import TestCase
-
-from . import decorators as dec
-from .utils import *
-from .nosetester import NoseTester as Tester
-from .nosetester import run_module_suite
+# fake tester, android don't have unittest
+class Tester(object):
+    def test(self, *args, **kwargs):
+        pass
+    def bench(self, *args, **kwargs):
+        pass
 test = Tester().test
